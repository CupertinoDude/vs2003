
<%@ Register TagPrefix="Acme" TagName="SourceRef" Src="/quickstart/aspplus/util/SrcRef.ascx"%>


<!-- #include virtual="/quickstart/aspplus/include/header.inc" -->

<span class="header">Caching Overview</span>

<p>
Caching is a technique widely used in computing to increase performance by keeping frequently accessed or expensive data in memory.  In the context of a Web application, caching is used to retain pages or data across HTTP requests and reuse them without the expense of recreating them.
</p>

<p>
ASP.NET has three kinds of caching that can be used by Web applications:
<ul>
<li><a href="/quickstart/aspplus/doc/outputcaching.aspx">Output caching</a>, which caches the dynamic response generated by a request.</li>
<li><a href="/quickstart/aspplus/doc/fragmentcaching.aspx">Fragment caching</a>, which caches portions of a response generated by a request.</li>
<li><a href="/quickstart/aspplus/doc/datacaching.aspx">Data caching</a>, which caches arbitrary objects programmatically. To support this, ASP.NET provides a full-featured cache engine that allows programmers to easily retain data across requests.</li>
</ul>
<p>
Output caching is useful when the contents of an entire page can be cached.  On a heavily accessed site, caching frequently accessed pages for even a minute at a time can result in substantial throughput gains.  While a page is cached by the output cache, subsequent requests for that page are served from the output page without executing the code that created it.
<p>
Sometimes it is not practical to cache an entire page - perhaps portions of the page must be created or customized for
each request.  In this case, it is often worthwhile to identify objects or data that are expensive to construct and are eligible for caching.  Once these items are identified, they can be created once and then cached for some
period of time.  Additionally, fragment caching can be used to cache regions of a page's output.
<p>
Choosing the time to cache an item can be an interesting decision.  For some items, the data might be refreshed at regular intervals or the data is valid for a certain amount of time.  In that case, the cache items can be given an expiration policy that causes them to be removed from the cache when they have expired.  Code that accesses the cache item simply checks for the absence of the item and recreates it, if necessary.
<p>
The ASP.NET cache supports file and cache key dependencies, allowing developers to make a cache item dependent on an external file or another cache item.  This technique can be used to invalidate items when their underlying data source changes.

<!--
NOTE: Small overview sections don't need a summary...
<h4>Section Summary</h4>
<ol>
<li>Caching is a valuable technique for improving the performance of Web applications
<li>Output caching caches the output of an entire page
<li>Objects and data can be cached programmatically using the ASP.NET Cache APIs
<li>The ASP.NET cache supports expiration and dependencies
</ol>
-->

<!-- #include virtual="/quickstart/aspplus/include/footer.inc" -->