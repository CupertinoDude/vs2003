<%@ Register TagPrefix="Acme" Namespace="Acme" Assembly="QSTools" %>
<%@ Register TagPrefix="Acme" TagName="SourceRef" 
    Src="/quickstart/aspplus/util/SrcRef.ascx"%>

<!-- #include virtual="/quickstart/aspplus/include/header.inc" -->

<span class="header">XML Web service Type Marshaling</span>
<p>
This section illustrates that various data types can be passed to 
and returned from <b>XML Web service</b> methods.
Because the XML Web services implementation is built on top of the 
XML Serialization architecture, it supports a significant number of data types.
The following table lists the supported data types for <b>XML Web 
service</b> methods when using the SOAP protocol (for example, using 
the proxy generated by the Web Services Description Language tool, WSDL.exe).
</p>
<p>

<div class="indent">
<table class="table2" cellpadding="3" width="90%">
</tr>
<tr><th width="180"><b>Type</b></th><th><b>Description</b></th></tr>

<tr><td><b>Primitive Types</b></td><td>Standard primitive types.  
The complete list of supported primitives are
String, Char, Byte, Boolean, Int16, Int32, Int64, UInt16, UInt32, 
UInt64, Single, Double,
Guid, Decimal, DateTime (as XML's dateTime), DateTime (as XML's date),
DateTime (as XML's time), and XmlQualifiedName (as XML's QName).
</td></tr>

<tr><td><b>Enum Types</b></td><td>Enumeration types, for example, 
"public enum color { red=1, blue=2 }"</td></tr>
<tr><td><b>Arrays of Primitives, Enums</b></td><td>Arrays of the 
above primitives, such as string[] and int[]</td></tr>

<tr><td><b>Classes and Structs</b></td><td>Class and struct types 
with public fields or properties.  The public properties and fields 
are serialized.</td></tr>

<tr><td><b>Arrays of Classes (Structs)</b></td><td>Arrays of the above.</td></tr>

<tr><td><b>DataSet</b></td><td>ADO.NET DataSet Types (see the next 
section for an example).  DataSets can also appear as fields in structs or classes.
<p>
<b>Note:</b> Microsoft Visual Studio .NET and the XSD.EXE SDK 
utility have support for "strong-typing" a DataSet.
These tools generate a class that inherits from DataSet to produce 
DataSet1, adding several methods/properties/etc that are specific
to a particular XML schema.  If you pass DataSet, XML Web services 
always transmits the schema along with the data
(so it knows what tables and columns you are passing), and their 
types (for example, int, string).  If you pass a subclass of DataSet
(for example, DataSet1), XML Web services assumes you are adding 
tables/columns in the constructor, and assumes that those
tables/columns represent your schema.  
</td></tr>

<tr><td><b>Arrays of DataSet</td><td>Arrays of the above.</b></td></tr>

<tr><td><b>XmlNode</b></td><td>
XmlNode is an in-memory representation of an XML fragment 
(like a lightweight XML document object model).  For example,
"&lt;comment&gt;This is&lt;b&gt;pretty&lt;/b&gt; 
neat&lt;/comment&gt;" could be stored in an XmlNode.  You can pass
XmlNodes as parameters, and they are added to the rest of the XML 
being passed to the XML Web service (the other parameters) in a
SOAP-compliant manner.   The same is true for return values.  
This allows you to pass or return XML whose structure changes from
call to call, or where you may not know all the types being passed.  
XmlNode can also appear as fields in structs or classes.
</td></tr>
<tr><td><b>Arrays of XmlNode</b></td><td>Arrays of above.</td>
</table>
</div>
<p>

<div class="indent">
<b>Return values: </b><p>Whether calling a XML Web service using 
SOAP or HTTP GET/POST, all the above types are supported for return values.
<p>
<b>Parameters: </b><p>Both by-value and by-reference (in/out) 
parameters are supported when using the SOAP protocol.  By-reference 
parameters can send the
value both ways: up to the server, and back to the client.  When 
passing input parameters to a XML Web service using HTTP GET/POST, only a
limited set of data types are supported, and they must be 
by-value parameters.  The supported types for HTTP GET/POST 
parameters are listed below:
<p>
</div>

<div class="indent">
<table class="table2" width="90%">
</tr>
<tr><th width="180"><b>Type</b></th><th><b>Description</b></th></tr>

<tr><td><b>Primitive Types (limited)</b></td><td>Most standard 
primitive types.  The complete list of supported primitives are
Int32, String, Int16, Int64, Boolean, Single, Double, Decimal, 
DateTime, UInt16, UInt32, UInt64, and Currency.
From the client's perspective, all these types turn into string.
</td></tr>
<tr><td><b>Enum Types</b></td><td>Enumeration types, for 
example, "public enum color { red=1, blue=2 }".
From the client's perspective, enums become classes with a static 
const string for each value.
</td></tr>
<tr><td><b>Arrays of Primitives, Enums</b></td><td>Arrays of the 
above primitives, such as string[] and int[]</td></tr>
</table>
</div>

<p>
The following example demonstrates the use of the types listed 
above, using a SOAP proxy generated from WSDL.exe.  Note
that because there is more than one public class defined in the 
.asmx file, you must specify which is to be treated as the <b>XML Web service</b>
class using the "Class" attribute of the <b>XML Web service</b> directive:
<p>

<div class="code"><pre>
&lt;%@ WebService Language="C#" Class="DataTypes" %&gt;
</pre></div>

<p>

<table>
<tr>
<td>
<Acme:LangSwitch runat="server">
  <CsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/CS/DataTypes.asmx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypes.src"
  Icon="/quickstart/aspplus/images/datatypes_asmx.gif"
  Caption="C# DataTypes.asmx"
  runat="server" />
  </CsTemplate>
  <VbTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/VB/DataTypes.asmx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypes.src"
  Icon="/quickstart/aspplus/images/datatypes_asmx.gif"
  Caption="VB DataTypes.asmx"
  runat="server" />
  </VbTemplate>
  <JsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/JS/DataTypes.asmx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypes.src"
  Icon="/quickstart/aspplus/images/datatypes_asmx.gif"
  Caption="JScript DataTypes.asmx"
  runat="server" />
  </JsTemplate>
</Acme:LangSwitch>
</td>
<td>
<Acme:LangSwitch runat="server">
  <CsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/CS/DataTypes.asmx?WSDL"
  Icon="/quickstart/aspplus/images/service_sdl.gif"
  Caption="C# DataTypes.asmx?wsdl"
  runat="server" />
  </CsTemplate>
  <VbTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/VB/DataTypes.asmx?WSDL"
  Icon="/quickstart/aspplus/images/service_sdl.gif"
  Caption="VB DataTypes.asmx?wsdl"
  runat="server" />
  </VbTemplate>
  <JsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/JS/DataTypes.asmx?WSDL"
  Icon="/quickstart/aspplus/images/service_sdl.gif"
  Caption="JScript DataTypes.asmx?wsdl"
  runat="server" />
  </JsTemplate>
</Acme:LangSwitch>
</td>
</tr>
</table>

<p>

<UL>
<LI>The <B>SayHello</B> method shows returning a String from a service.
<LI>The <B>SayHelloName</B> method returns a String, and also takes 
a String as a parameter.
<LI>The <B>GetIntArray</B> method shows how to return an array of integers.
<LI>The <B>GetMode</B> method returns an enum value.
<LI>The <B>GetOrder</B> method returns a class (which is almost 
the same as a struct here).
<LI>The <B>GetOrders</B> method returns an array of <b>Order</b> objects.
</UL>

<p>
Using the WSDL.exe command line proxy generation tool, the marshaling of 
these data types is transparent to the consuming client application.
A sample client application for the above XML Web service follows:
<p>

<Acme:LangSwitch runat="server">
  <CsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/CS/DataTypesClient.aspx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypesClient.src"
  Icon="/quickstart/aspplus/images/datatypes_client.gif"
  Caption="C# DataTypesClient.aspx"
  runat="server" />
  </CsTemplate>
  <VbTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/VB/DataTypesClient.aspx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypesClient.src"
  Icon="/quickstart/aspplus/images/datatypes_client.gif"
  Caption="VB DataTypesClient.aspx"
  runat="server" />
  </VbTemplate>
  <JsTemplate>
<Acme:SourceRef
  RunSample="/quickstart/aspplus/samples/services/DataTypes/JS/DataTypesClient.aspx"
  ViewSource="/quickstart/aspplus/samples/services/DataTypes/DataTypesClient.src"
  Icon="/quickstart/aspplus/images/datatypes_client.gif"
  Caption="JScript DataTypesClient.aspx"
  runat="server" />
  </JsTemplate>
</Acme:LangSwitch>

<!-- #include virtual="/quickstart/aspplus/include/footer.inc" -->