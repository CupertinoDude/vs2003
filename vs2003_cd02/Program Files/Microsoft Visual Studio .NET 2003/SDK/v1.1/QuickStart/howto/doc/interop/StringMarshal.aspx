<%@ Register TagPrefix="Acme" Namespace="Acme" Assembly="QSTools" %>
<%@ Register TagPrefix="Acme" TagName="SourceRef" Src="/quickstart/howto/util/SrcRef.ascx"%>

<!-- #include virtual="/quickstart/howto/include/interopheader.inc" -->

<h4>How Do I...Marshal Strings Between Managed and Unmanaged Code?</h4>

<p>This example demonstrates how to marshal strings from .NET client to COM server.</p>

<p>In order to use the types and methods defined within a COM library from managed code, you have to obtain 
an assembly containing definitions of the COM types. Refer to the 
<A href="/quickstart/howto/doc/Interop/Building_Samples_NET2COM.aspx">How Do I...Build a .NET Client That Uses a COM Server?</A> 
for specific details.</p>

<p>This assembly contains all of the information about how parameters should be marshaled. You can call COM
methods from managed code using managed data types (in this case <b>String</b> type) and they will be marshaled 
as COM server expects: as BSTR, as LPSTR or as LPWSTR. There is no need for you to know details, 
all necessary attributes are generated by tlbimp.exe tool automatically.
<p>
For example, the COM methods below will be represented as these managed methods in an assembly 
containing definitions of the COM types. You can call them with the managed <b>String</b> type as
they are managed methods and the marshaler marshals them to unmanaged methods properly.

<p>COM methods:
<div class="code"><pre>
HRESULT PassBStr([in] BSTR s);
HRESULT PassLPStr([in] LPSTR s);
HRESULT PassLPWStr([in] LPWSTR s);
</pre></div>
<p>Managed methods representation:
<div class="code"><pre>
public void PassBStr([MarshalAs(UnmanagedType.BStr)] String s); 
public void PassLPStr([MarshalAs(UnmanagedType.LPStr)] String s);
public void PassLPWStr([MarshalAs(UnmanagedType.LPWStr)] String s);
</pre></div>		


<p>With Visual Basic .NET or with C#, you can reference the assembly file using the compiler /r switch or
you can add reference to the project directly from Visual Studio .NET development tool.</p>

<br>
<Acme:TabControl runat="server">
<Tab Name="C#">
public class StringLibTest {
	public static void Main(){
		StringTest2Lib.ITestString strServer;
		strServer = new StringTest2Lib.TestString();
		
		String param1 = "String Sample 1";
		String param2 = "String Sample 2";
		String param3 = "String Sample 3";			
		
		Console.WriteLine("\nCalling PassBSTR with s = {0}", param1);
		<b>strServer.PassBStr(param1);</b>
		Console.WriteLine("After call s = {0}\n", param1);			
		
		Console.WriteLine("\nCalling PassLPStr with s = {0}", param2);
		<b>strServer.PassLPStr(param2);</b>
		Console.WriteLine("After call s = {0}\n", param2);
		
		Console.WriteLine("\nCalling PassLPWStr with s = {0}", param3);
		<b>strServer.PassLPWStr(param3);</b>
		Console.WriteLine("After call s = {0}\n", param3);	
		...		
</Tab>
<Tab Name="VB">
Public Class Test 
	Public Shared Sub Main()
		Dim strServer As StringTest2Lib.ITestString
		strServer = New StringTest2Lib.TestString
		
		Dim param1 As String = "String Sample 1"
		Dim param2 As String = "String Sample 2"
		Dim param3 As String = "String Sample 3"		
		
		Console.WriteLine("Calling PassBSTR with s = {0}", param1)
		<b>strServer.PassBStr(param1)</b>
		Console.WriteLine("After call s = {0}", param1)			
		
		Console.WriteLine("Calling PassLPStr with s = {0}", param2)
		<b>strServer.PassLPStr(param2)</b>
		Console.WriteLine("After call s = {0}", param2)
		
		Console.WriteLine("Calling PassLPWStr with s = {0}", param3)
		<b>strServer.PassLPWStr(param3)</b>
		Console.WriteLine("After call s = {0}", param3)
		...		
</Tab>
<Tab Name="C++">
void main()
{
	StringTest2Lib::ITestString * strServer = new StringTest2Lib::TestStringClass;

        String * param1 = S"String Sample 1";
        String * param2 = S"String Sample 2";
        String * param3 = S"String Sample 3";    

	<b>strServer->PassBStr(param1);</b>
	Console::WriteLine("After call s = {0}\n", param1);            
	
	Console::WriteLine(S"\nCalling PassLPStr with s = {0}", param2);
	<b>strServer->PassLPStr(param2);</b>
	Console::WriteLine(S"After call s = {0}\n", param2);
	
	Console::WriteLine(S"\nCalling PassLPWStr with s = {0}", param3);
	<b>strServer->PassLPWStr(param3);</b>
	Console::WriteLine(S"After call s = {0}\n", param3);
	
	...
}		
</Tab>
</Acme:TabControl>

<p>The following example uses one COM server, which has the methods for string manipulation. Each method accepts
one string parameter, prints it to a console window, and then changes its first letter. The only difference is how the string
parameter is declared. 
<p>

<Acme:LangSwitch runat="server">
  <CsTemplate>
        <Acme:SourceRef 
        RunSample="/quickstart/howto/samples/Interop/StringMarshal/CS"        
        ViewSource="/quickstart/howto/samples/Interop/StringMarshal/StringMarshal.src"
        Icon = "/quickstart/images/console.gif"
        Caption="StringClient.exe"
        MapRunSamplePath="true"
        runat="server" />
  </CsTemplate>
  <VbTemplate>
        <Acme:SourceRef 
        RunSample="/quickstart/howto/samples/Interop/StringMarshal/VB"
        ViewSource="/quickstart/howto/samples/Interop/StringMarshal/StringMarshal.src"
        Icon = "/quickstart/images/console.gif"
        Caption="StringClient.exe"
        MapRunSamplePath="true"
        runat="server" />
  </VbTemplate>
  <CpTemplate>
        <Acme:SourceRef 
        RunSample="/quickstart/howto/samples/Interop/StringMarshal/CP"
        ViewSource="/quickstart/howto/samples/Interop/StringMarshal/StringMarshal.src"
        Icon = "/quickstart/images/console.gif"
        Caption="StringClient.exe"
        MapRunSamplePath="true"
        runat="server" />
  </CpTemplate>
</Acme:LangSwitch>

<!-- #include virtual="/quickstart/howto/include/footer.inc" -->
