<?xml version="1.0" encoding="utf-8"?><root xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:d2="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"><?xml-stylesheet type="text/xsl" href="..\..\..\readme.xsl"?><HTML><HEAD><TITLE> Queued Components Sample</TITLE><STYLE>
    .Title{FONT-FAMILY: Verdana;FONT-SIZE: large;COLOR: #808080}
    </STYLE><STYLE>
    .Heading{FONT-FAMILY: Verdana;FONT-SIZE: large}
    </STYLE><STYLE>
    .SectionBreak{FONT-SIZE: small;MARGIN-BOTTOM: 2em}
    </STYLE><STYLE>
    .SmallBreak{FONT-SIZE: small;MARGIN-BOTTOM: 1.5em}
    </STYLE><STYLE>
    .Text{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedHeading{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedText{MARGIN-LEFT: 3ex;FONT-FAMILY: Lucida Console;FONT-SIZE: x-small;FONT-WEIGHT: Bold}
    </STYLE><STYLE>
    .ListSansBullets {list-style-type: none;FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE></HEAD><BODY><table><tr><td><h2 class="Title"> Queued Components Sample</h2></td><td valign="baseline" class="Text">
               
              
                  (Windows Forms Application)
                </td></tr></table><p class="Text">
    This document contains the release information for the .NET Framework Queued Components sample. You will find the following sections below: 
    </p><ul class="Text"><li><a href="#_Sample_Overview">Overview</a></li><li><a href="#_Sample_Topics">Topics</a></li><li><a href="#_Location_of_Sample">Location</a></li><li><a href="#_Building_the_Sample">Building the sample</a></li><li><a href="#_Running_the_Sample">Running the sample</a></li><li><a href="#_Uninstalling_the_Sample">Uninstalling the sample</a></li><li><a href="#_sdkvars">Notes</a></li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Overview" />
    Overview
    </h4><p class="Text"><p class="text">
Queued Components is a COM+ feature built on top of Message Queueing Services (MSMQ) that provides a mechanism for invoking and executing components asynchronously. When a client makes a call to a queued object, the call is actually made to a recorder, which packages it as a message and places that message in a queue. A listener reads the message from the queue and passes it to the player. The player makes the actual method calls on the server object.
</p><p class="text">
In order for the server to receive queued messages, it must be activated in some way. Server components can be activated manually, using scripting in combination with the task scheduler, or programmatically. In this sample, we will activate the server component manually.
</p><p class="text">
The sample code consists of a client application and a managed object that is marked for InterfaceQueueing. The listener is enabled by means of a class attribute. On building the application, COM+ creates a queue whose name is the same as the specified COM+ application.
</p><p class="text">
The client application contains a single button. Clicking the button invokes the queued component recorder by means of a queue moniker. All calls through the returned reference are packaged and placed in the appropriate message queue. 
</p><p class="text">
Queued method calls will be unpackaged and delivered to the actual server component when it is activated in the Component Services administrative tool. The sample server displays a simple message box to show that the call has made it to the server.
</p></p><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Topics" />
  Topics
  </h4><p class="Text">
  The following bullets briefly describe the technologies used by this sample.
  </p><ul class="Text"><li><b>Queued Components - </b>COM+ feature that builds on Microsoft Message Queuing (MSMQ) in order to provide easy, asynchronous invocation and execution of server components.
</li><li><b>Message Queuing - </b>Technology that enables applications running at different times to communicate across networks and systems that may be temporarily offline. Queues store messages generated by sending applications which can be retrieved later by receiving applications.
</li><li><b>InterfaceQueuing attribute - </b>Attribute that enables queuing support for a specified interface. Calls on the interface will be queued using MSMQ.
</li><li><b>ApplicationQueuing attribute - </b>Attribute used to enable and configure queuing support for the marked assembly.
</li><li><b>QueuingEnabled attribute - </b>Indicates whether queued components is enabled for the application.
</li><li><b>QueueListenerEnabled attribute - </b>Indicates whether the queued components listener is enabled for the application.
</li><li><b>Queue moniker - </b>Used to invoke a queued component. Queue monikers also accept optional arguments that alter the properties of messages sent to MSMQ. See the Platform SDK documentation for more information.
</li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Location_of_Sample" />
    Location
    </h4><p class="Text">
    This sample is located in the <a href="." title="Jump to Folder" target="_blank">Technologies\ComponentServices\QueuedComponents</a> subdirectory of the .NET Framework SDK samples directory.
    </p><p class="FixedHeading">
    For Example:
      <p class="FixedText">
      C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\ComponentServices\QueuedComponents</p></p><p class="SectionBreak" /><h4 class="Heading"><a name="_Building_the_Sample" />
    Building the Sample
    </h4><p class="Text">
    In order to properly build and run this sample, the following steps need to be performed.
    </p><p class="Text"> 
IMPORTANT: in order to build and execute this sample, MSMQ must be installed on your computer in Workgroup mode.
</p><p class="Text">
Double-click My Computer\Control Panel\Add/Remove Programs.
</p><p class="Text">
In the Add/Remove Programs dialog, click 'Add/Remove Windows Components' and check the item labeled 'Message Queuing Services'. Click 'Next'.
</p><p class="Text">
Windows 2000 has additional steps to install MSMQ:<br></br>
In the subsequent 'Message Queuing Type' wizard page, click the checkbox labeled 'Manually select access mode to Active Directory'. Click 'Next'.
</p><p class="Text">
In the subsequent 'Message Queuing Server' page, click the radio button labeled 'Message Queuing will not access a directory service'. Click 'Next' and setup will complete. Click 'Finished'.
</p><p class="Text">
After installing MSMQ, build the sample code by typing <b>BuildAll.bat</b> from the command line.      
<p class="FixedHeading">
  For Example:
  </p><p class="FixedText"> 
C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\ComponentServices\QueuedComponents&gt;buildall.bat
</p></p><p class="Text">
If you're building the sample from Visual Studio 7, you will need to register the QCDemoSvr.dll assembly to setup the Message Queue before running the sample.  Note: The regsvcs.exe program is located in the <i>%systemroot%\Microsoft.NET\Framework\&lt;version&gt;</i> directory.
<p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\ComponentServices\QueuedComponents\CS&gt;regsvcs QCDemoSvr.dll
</p>
you will also need to install the QCDemoSvr.dll assembly to the Global Assembly Cache before running the sample.  Note: The gacutil.exe program is located in the <i>SDK\v1.1</i>\Bin directory.  
<p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\ComponentServices\QueuedComponents\CS&gt;gacutil -i QCDemoSvr.dll
</p></p><p class="Text">
The sample builds a C# and VB version of the client application and COM+ component. Source code for each language is stored in subdirectories named \CS and \VB. The C# component has 'CS' appended to its name as viewed in the Component Services administrative tool, 'QCDemoServerCS.QComponent'. The VB version is named 'QCDemoServerVB.QComponent'. When working with the sample code, be sure to observe and/or modify the version of the COM+ component that corresponds to the client application you launch.
</p><p class="Text">
Review comments in the source code and build.bat files for more information on sample binary creation and registration steps.
</p><p class="SectionBreak" /><h4 class="Heading"><a name="_Running_the_Sample" />
    Running the Sample
    </h4><p class="Text">
    In order to run this sample, follow the instructions listed below.
    </p><span class="Text"><ul class="Text"><li>
NOTE: The COM+ .NET samples require Windows 2000 or higher in order to build and run.
</li></ul><ul class="Text"><li>
Build the Queued Components sample code following the instructions above.
</li></ul><ul class="Text"><li>
Type <b>QCDemo.exe</b> from the command line (or launch qcdemo.exe from the Windows explorer).
<p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\ComponentServices\QueuedComponents\CS&gt;qcdemo.exe
</p></li></ul><ul class="Text"><li>
Click the button labeled 'Send Queued Msg'. Alter the string value in the text edit field, and click 'Send Queued Msg' a second time. This should place two packaged method calls in the queue.
</li></ul><ul class="Text"><li>
Next, examine the messages in the QCDemoSvr queue. Right-Click 'My Computer' and select 'Manage' from the pop-up menu. Expand 'Services and Applications\Message Queueing\Private Queues' in the Computer Management console. You should see a queue named 'qcdemosvr' in this node. The queue name corresponds to the name of the COM+ application that holds the queued component (we'll examine the application in a later step).
</li></ul><ul class="Text"><li>
Expand 'qcdemosvr' and select 'Queue messages'. You should see two messages in the right-hand pane, corresponding to the two queued component methods calls we made in the client application.
</li></ul><ul class="Text"><li>
Launch the Component Services administrative tool (also called the 'COM+ explorer'), by clicking 'Start\Settings\Control Panel' then double-clicking 'Administrative Tools\Component Services'.
</li></ul><ul class="Text"><li>
Locate the QCDemoSvr COM+ application by expanding Component Services\Computers\My Computer\COM+ Applications in the left-hand COM+ explorer pane.
</li></ul><ul class="Text"><li>
Right-click the QCDemoSvr application and select 'Start' from the popup menu. This activates the server component. The listener/player will pull messages from the qcdemosvr queue and call into the server. As a result, you should see two message boxes which contain the text strings from the original calls from the sample client application.
</li></ul><ul class="Text"><li>
You can return to the Computer Management console to observe that the qcdemosvr no longer contains queued messages. Subsequent calls from the client application are passed directly to the server and message boxes will appear immediately for each button click.
</li></ul><ul class="Text"><li>
NOTE: in order to return to queuing messages, you must shut down the QCDemoSvr COM+ application (by right-clicking the application in the COM+ explorer and selecting 'Shut down'). Due to a problem in Windows 2000, the QCDemo client .exe must be closed before the QCDemoSvr COM+ application will shut down. This problem will be fixed in a later version of Windows.
</li></ul></span><p class="SectionBreak" /><h4 class="Heading"><a name="_Uninstalling_the_Sample" />			
			Uninstalling the Sample
		</h4><p class="Text">
			In order to uninstall this sample, follow the instructions listed below.
		</p><span class="Text"><ul class="Text"><li>
To uninstall this sample, run <b>buildall.bat -u.</b> or <b>build.bat -u.</b> The batch file will then call regsvcs and gacutil with the /u switch in order to remove the sample files from the COM+ catalog and Global Assembly Cache.
</li></ul></span><p class="SectionBreak" /><h4 class="Heading"><a name="_sdkvars" />
    Notes
    </h4><p class="Text">
    For the .Net Framework samples to function properly, your Path, Include, and Lib environment variables must be set correctly. 
    In many cases, the SDK install program updates these environment variables for you. However, if you installed the .Net Framework SDK 
    using Visual Studio .NET, or unselected "register environment variables" during setup, these environment variables will not be updated. 
    You can set the Path, Include and Lib environment variables by running SDKVars.bat, located in the <i>&lt;SDKRoot&gt;\Bin</i> directory. 
    SDKVars.bat must be executed in every command shell.
    </p></BODY></HTML></root>