<?xml version="1.0" encoding="utf-8"?><root xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:d2="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"><?xml-stylesheet type="text/xsl" href="..\..\..\readme.xsl"?><HTML><HEAD><TITLE>Reflection-Emit Sample</TITLE><STYLE>
    .Title{FONT-FAMILY: Verdana;FONT-SIZE: large;COLOR: #808080}
    </STYLE><STYLE>
    .Heading{FONT-FAMILY: Verdana;FONT-SIZE: large}
    </STYLE><STYLE>
    .SectionBreak{FONT-SIZE: small;MARGIN-BOTTOM: 2em}
    </STYLE><STYLE>
    .SmallBreak{FONT-SIZE: small;MARGIN-BOTTOM: 1.5em}
    </STYLE><STYLE>
    .Text{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedHeading{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedText{MARGIN-LEFT: 3ex;FONT-FAMILY: Lucida Console;FONT-SIZE: x-small;FONT-WEIGHT: Bold}
    </STYLE><STYLE>
    .ListSansBullets {list-style-type: none;FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE></HEAD><BODY><table><tr><td><h2 class="Title">Reflection-Emit Sample</h2></td><td valign="baseline" class="Text">
               
              
                  (Console Application)
                </td></tr></table><p class="Text">
    This document contains the release information for the .NET Framework ReflectionEmit sample. You will find the following sections below: 
    </p><ul class="Text"><li><a href="#_Sample_Overview">Overview</a></li><li><a href="#_Sample_Topics">Topics</a></li><li><a href="#_Location_of_Sample">Location</a></li><li><a href="#_Building_the_Sample">Building the sample</a></li><li><a href="#_Running_the_Sample">Running the sample</a></li><li><a href="#_sdkvars">Notes</a></li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Overview" />
    Overview
    </h4><p class="Text">
This sample demonstrates how to use reflection-emit. Reflection-emit is a runtime feature that allows code to create dynamic assemblies, modules and types. These types can be created for the purpose of instantiating them dynamically and using them, or reflection-emit can be used to generate an assembly and persist it to disk as an EXE or DLL. This sample consists of two executables. The first executable, EmitAssembly.exe, will generate a dynamic type, and test it, or it will generate a dynamic type and persist it to disk as a DLL. The second executable, TestEmittedAssembly.exe, simply tests the assembly dynamically emitted by the EmitAssembly.exe. The type emitted by EmitAssembly.exe is a simple class called "HelloWorld" whose constructor takes a single string parameter. The type also implements a GetGreeting() method which returns the string passed to the instance constructor.
</p><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Topics" />
  Topics
  </h4><p class="Text">
  The following bullets briefly describe the classes and technologies used by this sample.
  </p><ul class="Text"><li><b>Reflection-Emit - </b><ul class="Text"><li><b>AppDomain - </b>
      The sample uses the AppDomain type to create a dynamic assembly in the sample's AppDomain. It does this by calling DefineDynamicAssembly().
      </li></ul><ul class="Text"><li><b>AssemblyBuilder - </b>
      The AssemblyBuilder type is used to build a dynamic assembly. It can be used to create an assembly for immediate use, or a dynamic assembly can be persisted to an assembly DLL or EXE file.
      </li></ul><ul class="Text"><li><b>AssemblyName - </b>
      This type is used to define the unique identity of an assembly. This sample uses this type in the simplest possible way by giving the dynamic assembly the text name "EmmittedAssembly".
      </li></ul><ul class="Text"><li><b>ModuleBuilder - </b>
      The module builder type is used to build a dynamic module in the dynamic assembly.
      </li></ul><ul class="Text"><li><b>TypeBuilder - </b>
      This Type-derived type is used to build a type dynamically. From it you can request instances of the FieldBuilder, ConstrutorBuilder, and MethodBuilder types. Using these types the sample generates a complete type.
      </li></ul><ul class="Text"><li><b>FieldBuilder - </b>
      The FieldBuilder type is used to create a field in a dynamic type.
      </li></ul><ul class="Text"><li><b>ConstructorBuilder - </b>
      Used to define a constructor in a dynamic type.
      </li></ul><ul class="Text"><li><b>MethodBuilder - </b>
      Used to define a method in a dynamic type.
      </li></ul><ul class="Text"><li><b>ILGenerator - </b>
      Both MethodBuilder and ConstructorBuilder implement a method called GetILGenerator(). These methods return an instance of the ILGenerator type which is used to dynamically generate IL-code for a type.
      </li></ul><ul class="Text"><li><b>Thread - </b>
      The static member function GetDomain() is used to get an instance of the AppDomain type for the current thread.
      </li></ul></li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Location_of_Sample" />
    Location
    </h4><p class="Text">
    This sample is located in the <a href="." title="Jump to Folder" target="_blank">Technologies\Reflection\ReflectionEmit</a> subdirectory of the .NET Framework SDK samples directory.
    </p><p class="FixedHeading">
    For Example:
      <p class="FixedText">
      C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Reflection\ReflectionEmit</p></p><p class="SectionBreak" /><h4 class="Heading"><a name="_Building_the_Sample" />
    Building the Sample
    </h4><p class="Text">
    In order to properly build and run this sample, the following steps need to be performed.
    </p><p class="Text">
      Type <b>BUILD.bat</b> from the command line.
      <p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
         C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Reflection\ReflectionEmit\VB&gt;Build.bat
      </p></p><p class="Text">
      Note that BUILD.bat actually builds two executable files: EmitAssembly.exe and TestEmittedAssembly.exe. However, in order to build TestEmittedAssembly.exe, the compiler needs to be able to open the referenced assembly "EmmittedAssembly.dll". After building EmitAssembly.exe, the BUILD.bat file executes EmitAssembly with the command line parameter "2" indicating that the sample should emit the dynamic assembly.
   </p><p class="SectionBreak" /><h4 class="Heading"><a name="_Running_the_Sample" />
    Running the Sample
    </h4><p class="Text">
    In order to run this sample, follow the instructions listed below.
    </p><span class="Text"><ul class="Text"><li>
      EmitAssembly accepts a command line parameter indicating which test you would like to execute.
   </li></ul><ul class="Text"><li>
      Type <b>EmitAssembly.exe 1</b> from the command line to have the sample emit the dynamic type into its AppDomain, and test the code using static code in the sample.
      <p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
         C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Reflection\ReflectionEmit\VB&gt;EmitAssembly.exe 1
      </p></li></ul><ul class="Text"><li>
      Type <b>EmitAssembly.exe 2</b> from the command line to have the sample emit the dynamic type into an assembly and persist the assembly to disk in the form of a .DLL and a .MOD file. After doing this, you might want to run TestEmittedAssembly.exe or ILDasm.exe to test the emitted code.
      <p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
         C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Reflection\ReflectionEmit\VB&gt;TestEmittedAssembly.exe
      </p><p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
         C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Reflection\ReflectionEmit\VB&gt;ILDasm EmittedModule.mod
      </p></li></ul><ul class="Text"><li>
      Type <b>EmitAssembly.exe 3</b> from the command line to have the sample emit the dynamic type into an assembly and emit a second dynamic type which tests the code of the first dynamic type.
   </li></ul></span><p class="SectionBreak" /><h4 class="Heading"><a name="_sdkvars" />
    Notes
    </h4><p class="Text">
    For the .Net Framework samples to function properly, your Path, Include, and Lib environment variables must be set correctly. 
    In many cases, the SDK install program updates these environment variables for you. However, if you installed the .Net Framework SDK 
    using Visual Studio .NET, or unselected "register environment variables" during setup, these environment variables will not be updated. 
    You can set the Path, Include and Lib environment variables by running SDKVars.bat, located in the <i>&lt;SDKRoot&gt;\Bin</i> directory. 
    SDKVars.bat must be executed in every command shell.
    </p></BODY></HTML></root>