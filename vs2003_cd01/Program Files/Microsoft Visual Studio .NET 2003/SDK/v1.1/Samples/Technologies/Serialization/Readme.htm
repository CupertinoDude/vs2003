<?xml version="1.0" encoding="utf-8"?><root xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:d2="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"><?xml-stylesheet type="text/xsl" href="..\..\readme.xsl"?><HTML><HEAD><TITLE>Serialization Sample</TITLE><STYLE>
    .Title{FONT-FAMILY: Verdana;FONT-SIZE: large;COLOR: #808080}
    </STYLE><STYLE>
    .Heading{FONT-FAMILY: Verdana;FONT-SIZE: large}
    </STYLE><STYLE>
    .SectionBreak{FONT-SIZE: small;MARGIN-BOTTOM: 2em}
    </STYLE><STYLE>
    .SmallBreak{FONT-SIZE: small;MARGIN-BOTTOM: 1.5em}
    </STYLE><STYLE>
    .Text{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedHeading{FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE><STYLE>
    .FixedText{MARGIN-LEFT: 3ex;FONT-FAMILY: Lucida Console;FONT-SIZE: x-small;FONT-WEIGHT: Bold}
    </STYLE><STYLE>
    .ListSansBullets {list-style-type: none;FONT-FAMILY: Verdana;FONT-SIZE: x-small}
    </STYLE></HEAD><BODY><table><tr><td><h2 class="Title">Serialization Sample</h2></td><td valign="baseline" class="Text">
               
              
                  (Console Application)
                </td></tr></table><p class="Text">
    This document contains the release information for the .NET Framework Serialization sample. You will find the following sections below: 
    </p><ul class="Text"><li><a href="#_Sample_Overview">Overview</a></li><li><a href="#_Sample_Topics">Topics</a></li><li><a href="#_Location_of_Sample">Location</a></li><li><a href="#_Building_the_Sample">Building the sample</a></li><li><a href="#_Running_the_Sample">Running the sample</a></li><li><a href="#_sdkvars">Notes</a></li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Overview" />
    Overview
    </h4><p class="Text">
This sample demonstrates the runtime’s ability to serialize an object graph in memory to a stream. This sample can use either the SoapFormatter or the BinaryFormatter for serialization. A linked list, filled with data, is serialized or deserialized to/from a file stream. In either case the list is displayed so that you can see the results. The linked list is of type LinkedList which is a type defined by this sample.
</p><p class="SectionBreak" /><h4 class="Heading"><a name="_Sample_Topics" />
  Topics
  </h4><p class="Text">
  The following bullets briefly describe the classes and technologies used by this sample.
  </p><ul class="Text"><li><b>Runtime Serialization - </b><ul class="Text"><li><b>IFormatter - </b>
      The sample uses a reference to this interface type to refer to either a BinaryFormatter or a SoapFormatter object.
      </li></ul><ul class="Text"><li><b>BinaryFormatter - </b>
      Used to serialize a linked list to a stream in a binary format. The binary formatter uses a format that only the BinaryFormatter type understands. However, the data is concise.
      </li></ul><ul class="Text"><li><b>SoapFormatter - </b>
      Used to serialize a linked list to a stream in the SOAP format. SOAP is a standard format.
      </li></ul></li><li><b>Stream I/O - </b><ul class="Text"><li><b>Stream - </b>
      The sample uses the Stream base class to serialize and deserialize. The specific stream type used in this sample is the FileStream type. However, serialization can be used with any type derived from Stream.
      </li></ul><ul class="Text"><li><b>File - </b>
      The sample uses this type to create FileStream objects for reading and creating files on disk.
      </li></ul><ul class="Text"><li><b>FileStream - </b>
      The sample uses this Stream-derived type to serialize and deserialize linked lists.
      </li></ul></li></ul><p class="SectionBreak" /><h4 class="Heading"><a name="_Location_of_Sample" />
    Location
    </h4><p class="Text">
    This sample is located in the <a href="." title="Jump to Folder" target="_blank">Technologies\Serialization
</a> subdirectory of the .NET Framework SDK samples directory.
    </p><p class="FixedHeading">
    For Example:
      <p class="FixedText">
      C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Serialization
</p></p><p class="SectionBreak" /><h4 class="Heading"><a name="_Building_the_Sample" />
    Building the Sample
    </h4><p class="Text">
    In order to properly build and run this sample, the following steps need to be performed.
    </p><p class="Text">
      Type <b>BUILD.bat</b> from the command line.
      <p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
         C:\Program Files\Microsoft.NET\SDK\v1.1\Samples\Technologies\Serialization\VB&gt;Build.bat
      </p></p><p class="SectionBreak" /><h4 class="Heading"><a name="_Running_the_Sample" />
    Running the Sample
    </h4><p class="Text">
    In order to run this sample, follow the instructions listed below.
    </p><span class="Text"><ul class="Text"><li><b>Serialize.exe</b> accepts command line parameters indicating which test you would like to execute.      
   </li></ul><ul class="Text"><li>
      To serialize a 10-node list to a file name Test.xml using the soap formatter you might enter the following on the command line:<p class="FixedText">Serialize.exe -sx Test.xml 10</p></li></ul><ul class="Text"><li>
      To deserialize the Test.xml file from the previous example enter the following on the command line:<p class="FixedText">Serialize.exe -dx Test.xml</p></li></ul><ul class="Text"><li>
      In the previous two examples, the <b>x</b> in the command line switch indicates that you want XML Soap serialization. You can use <b>b</b> in its place to use binary serialization.
   </li></ul><ul class="Text"><li>
      If you wish to try serialization with a very large number of nodes, you might want to redirect the console output to a file.
     <p class="FixedHeading">
  For Example:
  </p><p class="FixedText">
     Serialize.exe -sb Test.bin 10000 &gt;somefile.txt
     </p></li></ul></span><p class="SectionBreak" /><h4 class="Heading"><a name="_sdkvars" />
    Notes
    </h4><p class="Text">
    For the .Net Framework samples to function properly, your Path, Include, and Lib environment variables must be set correctly. 
    In many cases, the SDK install program updates these environment variables for you. However, if you installed the .Net Framework SDK 
    using Visual Studio .NET, or unselected "register environment variables" during setup, these environment variables will not be updated. 
    You can set the Path, Include and Lib environment variables by running SDKVars.bat, located in the <i>&lt;SDKRoot&gt;\Bin</i> directory. 
    SDKVars.bat must be executed in every command shell.
    </p></BODY></HTML></root>