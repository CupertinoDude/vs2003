<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="CLI.xsl"?>
<Document Title="Understanding Boxing and Unboxing">
	<Paragraph>
		Value types are lighter-weight than reference types because they are not allocated in the managed heap, not garbage collected, and not referred to by pointers. However, there are many 			cases where you must get a pointer to a value type object. For example, if you want to add the integer 5 to an ArrayList, then your code would look like this:
	</Paragraph>
	<Paragraph>
		<Code>
ArrayList a = new ArrayList();
a.Add(5);
		</Code>
	</Paragraph>
	<Paragraph>
		ArrayList’s Add method is prototyped as follows:
	</Paragraph>
	<Paragraph>
		<Code>Int32 Add(Object value);</Code>
	</Paragraph>
	<Paragraph>
		This indicates that Add requires a reference (or pointer) to an object on the managed heap as a parameter. It is possible to convert a value type to a reference type using a mechanism called 			boxing. In the code above, the C# compiler detects that you are passing a value type to a method that requires a reference type and the compiler automatically emits code to box the object. 			Boxing a value type causes the system to allocate memory from the managed heap, copy the fields from the value type into the newly-allocated memory, and return a reference (or pointer) to 		the object on the managed heap. This reference is what gets passed to ArrayList’s Add method.
	</Paragraph>
	<Paragraph>
		You should note that most languages designed for the CLR (like C# and VB.NET) automatically box value types into reference types when necessary. However, some languages (like C++ with 		Managed Extensions) require that the programmer write code to explicitly box value types when necessary.
	</Paragraph>
	<Paragraph>
		Now, examine the following code:
	</Paragraph>
	<Paragraph>
		<Code>Int32 x = a[0];</Code>
	</Paragraph>
	<Paragraph>
		Here, we’re taking the reference (or pointer) that is contained in element 0 of the ArrayList and we’re trying to put this reference into an Int32 value type, x. In order for this to work, the fields 			contained in the boxed Int32 object must be copied into the value type variable, x. This process of going from a boxed value type to its unboxed equivalent is called unboxing. Obviously, boxing 		and unboxing operations hurts your application in terms of both speed and memory so you should be aware of when the compiler will generate boxing/unboxing operations and try to write 			code that minimizes these operations.
	</Paragraph>
	<Paragraph>
		Again, most languages designed for the CLR will emit code automatically to unbox value types but some languages will require the programmer to write code to explicitly unbox value types. For 		more information about boxing and unboxing, please see the .NET Framework SDK documentation.
	</Paragraph>
	<Navigation>
		<Previous>Reference and Value Types.xml</Previous>
		<Next>Namespaces and Assemblies.xml</Next>
	</Navigation>
</Document>
