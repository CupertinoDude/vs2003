''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' TODO Add a reference to the following COM component:
' "Microsoft Visual Studio Analyzer 2002 Automatable Event Source Installer Type Libary"
Imports Microsoft.VisualStudioAnalyzer.EventInstall

Namespace BasicEventSrcSetup


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Class Purpose: A wrapper of VS Analyzer SDK functions to allow registration of an event 
    '               source and custom event.        
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                
    Public Class CVSAnalyzerInstaller

        'In-proc event creator GUID
        Private Const MYIEC_GUID As String = "{64A602AE-78E1-4A54-BDA6-0DB6E3DA4DF1}"
        'Name for the app that is generating the event
        Private Const strMyEventSource As String = "BasicEventSrcVB"

        'GUID for the user defined event        
        Private Const MYEVENT_GUID As String = "{148D8C58-0517-45EF-9A38-A4C79F0E61B8}"
        'Human readable event name
        Private Const strMyEventName As String = "MyBasicCustomEventVB1"
        'Description of the event
        Private Const strMyEventDescr As String = "MyBasicCustomEventVB1 event generated by the BasicEventSrcVB source"

        'GUID for the user defined event category
        Private Const MYEVENT_CATEGORY_GUID As String = "{23EAA6A3-0D7E-4896-9C34-700CEC8169A6}"
        'Human readable name for the user-defined category
        Private Const strMyCategoryName As String = "MyBasicCustomCategoryVB1"
        'Description of the category
        Private Const strMyCategoryDescr As String = "MyBasicCustomCategoryVB1 used by the BasicEventSrcVB source."


        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                        
        'Purpose:   Used to register a user event source, a user-defined category, and one 
        '           custom(user-defined) event in the category.                        
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Public Sub Register()

            Dim bIsRegistered As Boolean
            'Create an Event Source Installer(ESI) object
            Dim ESI As New MSVSAEventSourceInstaller()

            'Check to see if the event source creator is already registered
            ESI.IsSourceRegistered(MYIEC_GUID, bIsRegistered)
            If (Not bIsRegistered) Then
                'Not registered, register the event source.
                ESI.RegisterSource(strMyEventSource, MYIEC_GUID)
            End If

            ' Register the user-defined category.
            ' The category must be a subcategory of DEBUG_EVENT_CATEGORY_ALL or 
            ' DEBUG_EVENT_CATEGORY_MEASURED_ALL
            ESI.RegisterEventCategory(MYIEC_GUID, MYEVENT_CATEGORY_GUID, DEBUG_EVENT_CATEGORY_ALL, strMyCategoryName, strMyCategoryDescr, "", 0)

            'Register custom event in the user-defined category above.           
            ESI.RegisterCustomEvent(MYIEC_GUID, MYEVENT_GUID, strMyEventName, strMyEventDescr, DEBUG_EVENT_TYPE_GENERIC, MYEVENT_CATEGORY_GUID, "", 0)


            'We no longer need the ESI object.  Time to delete it.
            ESI = Nothing

        End Sub

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                        
        'Purpose:   Used to check if the provider is registered with VSAnalyzer. Return True if 
        '           it is registered or False otherwise.
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                                             
        Public Function IsRegistered() As Boolean
            Dim bIsRegistered As Boolean
            'Create an Event Source Installer(ESI) object
            Dim ESI As New MSVSAEventSourceInstaller()

            'Check to see if the event source creator is already registered
            ESI.IsSourceRegistered(MYIEC_GUID, bIsRegistered)
            IsRegistered = bIsRegistered
            'We no longer need the ESI object.  Time to delete it.
            ESI = Nothing

        End Function

        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                        
        'Purpose:   Used to unregister a user event source, which will automatically unregister
        '           any events associated with that event source.        
        ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
        Public Sub Unregister()
            'Create an Event Source Installer(ESI) object.
            Dim ESI As New MSVSAEventSourceInstaller()

            'Unregister the event source.
            ESI.UnRegisterSource(MYIEC_GUID)

           'No need to unregister categories and events of the event source, 
           'when the event source is unregistered all its categories and events
           'are unregistered automatically.

            'We no longer need the ESI object.  Time to delete it.
            ESI = Nothing

        End Sub

    End Class
End Namespace
