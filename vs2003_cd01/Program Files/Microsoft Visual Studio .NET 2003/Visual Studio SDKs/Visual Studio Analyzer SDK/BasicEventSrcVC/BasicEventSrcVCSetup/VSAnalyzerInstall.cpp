#include "VSAnalyzerInstall.h"

//constructor
CVSAnalyzerInstall::CVSAnalyzerInstall(void)
{
	HRESULT hr = S_FALSE;	

	//Create an instance of the Event Source Installer.
	m_pESI = NULL;
	
	hr = CoCreateInstance(CLSID_VSA_ESI, NULL, 
						  CLSCTX_INPROC_SERVER, 
						  IID_ISystemDebugEventInstall, 
						  (void **)&m_pESI );
	_ASSERTE(SUCCEEDED(hr));

}
//destructor
CVSAnalyzerInstall::~CVSAnalyzerInstall(void)
{		
	
}

/******************************************************************
* Purpose:	Checks if the basic event source is registered.
* Returns:	True if the source is registered and False otherwise
*******************************************************************/
bool CVSAnalyzerInstall::IsRegistered(void)
{
	HRESULT hr = m_pESI->IsSourceRegistered (BASIC_EVENT_SOURCE_GUID);
	_ASSERTE(SUCCEEDED(hr));
	return( S_OK == hr );

}

/******************************************************************
* Purpose:	Registers the basic event source with VS Analyzer.
* Returns:	Nothing.
*******************************************************************/	
void CVSAnalyzerInstall::RegisterBasicSource(void)
{
	//check to see if the Basic Event Source is registered
	//if it is not register it
	if (!IsRegistered ())
	{
		HRESULT hr = m_pESI->RegisterSource( L"BasicEventSrcVC", 
											 BASIC_EVENT_SOURCE_GUID);
		_ASSERTE(SUCCEEDED(hr));
	}

}

/******************************************************************
* Purpose:	Unregisters the basic event source from VS Analyzer, 
*			which will automatically unregister the custom event. 
* Returns:  Nothing
*******************************************************************/
void CVSAnalyzerInstall::UnRegisterBasicSource(void)
{
	//check to see if the Basic Event Source is registered
	//if it is unregister it
	if (IsRegistered())
	{
		HRESULT hr = m_pESI->UnRegisterSource (BASIC_EVENT_SOURCE_GUID);
		_ASSERTE(SUCCEEDED(hr));
	}
}

/******************************************************************
* Purpose:	Registers the custom category under which the custom 
*			event will be registered. Make sure the category is 
*			registered before you register the event. Also, the 
*			category CANNOT be a subcategory of the root one, which
*			has the GUID_NULL as identifier. It MUST be a subcategory
*			of the DEBUG_EVENT_CATEGORY_ALL or 
*			DEBUG_EVENT_CATEGORY_MEASURED_ALL.
* Returns:  Nothing
*******************************************************************/
void CVSAnalyzerInstall::RegisterCustomCategory(void)
{
HRESULT hr = S_FALSE;
	hr = m_pESI->RegisterEventCategory( BASIC_EVENT_SOURCE_GUID,		
										BASIC_CUSTOM_CATEGORY_GUID,
										DEBUG_EVENT_CATEGORY_ALL, 
										L"MyBasicCustomCategoryVC1",
 										L"MyBasicCustomCategoryVC1 used by the BasicEventSrcVC source.",
										L"",	// Optional: The file containing the icon for 
												// the category (or empty string)
										0);		// Optional: The icon res id for the category (or 0)
	_ASSERTE(SUCCEEDED(hr));
	
}

/******************************************************************
* Purpose:	Registers the custom event that would be fired 
*			by the Basic Event Source.	
* Returns:  Nothing
*******************************************************************/
void CVSAnalyzerInstall::RegisterCustomEvent(void)
{
	
	HRESULT hr = m_pESI->RegisterCustomEvent(BASIC_EVENT_SOURCE_GUID, 
											BASIC_CUSTOM_EVENT_GUID,
											L"MyBasicCustomEventVC1", 
											L"MyBasicCustomEventVC1 event generated by the BasicEventSrcVC source.",
											DEBUG_EVENT_TYPE_GENERIC,
											BASIC_CUSTOM_CATEGORY_GUID,
											NULL, 0);
	_ASSERTE(SUCCEEDED(hr));

}
