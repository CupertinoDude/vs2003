#pragma once
#ifndef VSANALYZERFIRE_H
#define VSANALYZERFIRE_H

//Defined to enable the use of UNICODE compliant functions
#define UNICODE

// Needed for CComPtr
// Also will include crtdbg.h, which is required to use the _ASSERTE() macro. 
#include <atlbase.h>

// These files are required for generating valid GUIDs. 
// Many of the Visual Studio Analyzer SDK interface methods take a GUID as input.
#include <objbase.h>      // Required by initguid.h
#include <initguid.h>      // Ensures that GUIDs are generated by
                           // DEFINE_GUID

// These files define ISystemDebugEventFire. 
// Located at "Microsoft Visual Studio .NET\Visual Studio SDKs\Visual Studio Analyzer SDK"
#include "vaevt_i.c"
#include "vaevt.h"         


// This file contains constants for system-defined categories and events. 
// Located at "Microsoft Visual Studio .NET\Visual Studio SDKs\Visual Studio Analyzer SDK"
#include "Vaids.h"

// {9ABA1EDE-8CFE-4ef6-BFBC-F322486E5583}
DEFINE_GUID(BASIC_EVENT_SOURCE_GUID, 
0x9aba1ede, 0x8cfe, 0x4ef6, 0xbf, 0xbc, 0xf3, 0x22, 0x48, 0x6e, 0x55, 0x83);

// {923CB7A2-7FBA-40f9-9112-F9953C30602F}
DEFINE_GUID(CUSTOM_EVENT_GUID, 
0x923cb7a2, 0x7fba, 0x40f9, 0x91, 0x12, 0xf9, 0x95, 0x3c, 0x30, 0x60, 0x2f);

// {1F96D33D-502D-4c97-80AC-1DDBE3A33BEE}
DEFINE_GUID(SAMPLE_GUID_PARAMETER, 
0x1f96d33d, 0x502d, 0x4c97, 0x80, 0xac, 0x1d, 0xdb, 0xe3, 0xa3, 0x3b, 0xee);


class CVSAnalyzerFire
{
public:
	//constructor
	CVSAnalyzerFire(void);
	//destructor
	~CVSAnalyzerFire(void);

	/******************************************************************
	* Purpose:	Checks if the basic event source is registered.
	* Returns:	True if the source is registered and False otherwise
	*******************************************************************/
	bool IsSourceRegistered(void);

	/*******************************************************************
	* Purpose:	Begins a session with Local Event Collector (LEC).
	* Returns:	Nothing.
	*******************************************************************/	
	void BeginSession(void);

	/******************************************************************
	* Purpose:	Ends the session established with the LEC.
	* Returns:  Nothing
	*******************************************************************/
	void EndSession(void);

	
	/******************************************************************
	* Purpose:	Fires custom nEvents custom events or 10 by default.
	* Returns:  Nothing
	*******************************************************************/
	void FireCustomEvent(int nEvents = 10);

	/******************************************************************
	* Purpose:	A simulation used to fire another method. In the whole 
	*			simulation, two event pairs will be fired. Each 
	*			pair has the same CorrelationID. The CorreletionID is 
	*			used by the Analyzer to determine the relationship 
	*			between the events. For example call (CALL) to the 
	*			method FireSimulationCalledMethod and return (RETURN) 
	*			from the same method should have the same CorrelationID, 
	*			so that Analyzer can relate them and plot them the 
	*			correct way. Within the FireSimulationCalledMethod
	*			two more events will be fired - one upon entering(ENTER) and 
	*			one before leaving (LEAVE). They should have the same 
	*			correlation ID, which must be different from the 
	*			Call/Return's pair Correlation ID.
	*			The CorrelationID is a string.
	* Returns:  Nothing
	*******************************************************************/
	void FireSimulation(void);	

private:
	
	/******************************************************************
	* Purpose:	A method that will be called by the FireSimulation
	*			method in order to be able to simualte Call/return 
	*			sequence of events.
	* Returns:  Nothing
	*******************************************************************/
	void FireSimulationCalledMethod(void);

	//pointer to the In-proc Event Creator
	CComPtr<ISystemDebugEventFire> m_spIEC;	

	//pointer to the Event Source Installer
	CComPtr<ISystemDebugEventInstall> m_spESI;	
	
};

#endif // VSANALYZERFIRE_H